The netutil functions defined for `internal/util/netutil.go` will be POSIX-specific due to their reliance on concepts like FD_CLOEXEC and passing file descriptors across exec. If Windows support were ever a future requirement (though the current spec focuses on POSIX), these functions would need platform-specific implementations or stubs, likely managed with Go build tags (e.g., in files like `netutil_posix.go`, `netutil_windows.go`).
The `ImplementCurlHTTPClient` task will be complex, particularly parsing `curl` output reliably. Suggestion: use `curl` options to write headers and body to separate temporary files (e.g., `curl -D header_file -o body_file ...`) and then parse these files. Standard `curl` exit codes and `-w '%{http_code}'` can get status. This approach is generally more robust than parsing combined stdout/stderr from `curl -v` or `curl -i`.
